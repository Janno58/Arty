#pragma once

////////////////////////////////////////////////////////////////////////////////
#include "Player.h"
#include <SFML/Graphics.hpp>
#include <deque>
#include <variant>

////////////////////////////////////////////////////////////////////////////////
namespace AI {

////////////////////////////////////////////////////////////////////////////////
struct WaitAction {
    sf::Time timeToWait{};
    sf::Clock clock{};
};

////////////////////////////////////////////////////////////////////////////////
struct RotateTurretAction {
    float degrees{};
};

////////////////////////////////////////////////////////////////////////////////
struct ShootAction {

};

////////////////////////////////////////////////////////////////////////////////
using Action = std::variant<WaitAction, RotateTurretAction, ShootAction>;


////////////////////////////////////////////////////////////////////////////////
class CompPlayer : public Player {
public:

    ////////////////////////////////////////////////////////////////////////////
    template<typename... Args>
    CompPlayer(size_t _index, Args &&...args) : Player(_index, std::forward<Args>(args) ...) {}

    ////////////////////////////////////////////////////////////////////////////
    void MouseMove(const sf::Vector2f &pos) final;

    ////////////////////////////////////////////////////////////////////////////
    bool IsComputer() const final;

    ////////////////////////////////////////////////////////////////////////////
    void UpdateTargeting(std::vector<PlayerInfo> info);

    ////////////////////////////////////////////////////////////////////////////
    void TurnStart();

    ////////////////////////////////////////////////////////////////////////////
    bool Act();

private:

    ////////////////////////////////////////////////////////////////////////////
    size_t target{};

    ////////////////////////////////////////////////////////////////////////////
    std::deque<AI::Action> actionList;

};
}

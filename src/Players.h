#pragma once

////////////////////////////////////////////////////////////////////////////////
#include "CompPlayer.h"
#include "Projectile.h"
#include <SFML/Graphics/Drawable.hpp>
#include <SFML/System/Vector2.hpp>
#include <Unit.h>
#include <deque>
#include <memory>
#include <utility>

////////////////////////////////////////////////////////////////////////////////
class HumanPlayer : public Player {
public:

    ////////////////////////////////////////////////////////////////////////////
    template<typename... Args>
    HumanPlayer(size_t indx, Args&& ...args) : Player(indx, std::forward<Args>(args) ...) { }

    ////////////////////////////////////////////////////////////////////////////
    void MouseMove(const sf::Vector2f& pos) final;

};

////////////////////////////////////////////////////////////////////////////////
class Players {
public:

    ////////////////////////////////////////////////////////////////////////////
    template<typename... Args>
    void AddPlayer(Args&& ...args) {
        players.emplace_back(std::make_unique<HumanPlayer>(players.size(), std::forward<Args>(args) ...));
    }

    ////////////////////////////////////////////////////////////////////////////
    template<typename... Args>
    void AddComputerPlayer(Args&& ...args) {
        players.emplace_back(std::make_unique<AI::CompPlayer>(players.size(), std::forward<Args>(args) ...));
    }

    ////////////////////////////////////////////////////////////////////////////
    std::optional<Player*> GetLoneSurvivor();

    ////////////////////////////////////////////////////////////////////////////
    Player* GetActive();

    ////////////////////////////////////////////////////////////////////////////
    void Next();

    ////////////////////////////////////////////////////////////////////////////
    [[nodiscard]]
    std::vector<PlayerInfo> EnumeratePlayersData() const;

    ////////////////////////////////////////////////////////////////////////////
    std::vector<std::unique_ptr<Player>>::iterator begin() { return players.begin(); }

    ////////////////////////////////////////////////////////////////////////////
    std::vector<std::unique_ptr<Player>>::iterator end() { return players.end(); }

private:

    ////////////////////////////////////////////////////////////////////////////
    std::vector<std::unique_ptr<Player>> players;

    ////////////////////////////////////////////////////////////////////////////
    std::vector<std::unique_ptr<Player>>::size_type activeIndex = 0UL;
};

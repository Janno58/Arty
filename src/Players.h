#pragma once

////////////////////////////////////////////////////////////////////////////////
#include <Unit.h>
#include <vector>

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
class Players {
public:

    ////////////////////////////////////////////////////////////////////////////
    template<typename... Args>
    void AddPlayer(Args&& ...args) {
        players.emplace_back(std::forward<Args>(args)...);
    }

    ////////////////////////////////////////////////////////////////////////////
    Unit& GetActive();

    ////////////////////////////////////////////////////////////////////////////
    bool PlayerChanged();

    ////////////////////////////////////////////////////////////////////////////
    void Next();

    ////////////////////////////////////////////////////////////////////////////
    std::vector<Unit>::iterator begin() { return players.begin(); }

    ////////////////////////////////////////////////////////////////////////////
    std::vector<Unit>::iterator end() { return players.end(); }

private:
    
    ////////////////////////////////////////////////////////////////////////////
    bool activePlayerChanged = false; 

    ////////////////////////////////////////////////////////////////////////////
    std::vector<Unit> players;

    ////////////////////////////////////////////////////////////////////////////
    std::vector<Unit>::size_type activeIndex = 0UL;
};

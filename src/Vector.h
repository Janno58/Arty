#pragma once
////////////////////////////////////////////////////////////////////////////////
#include <SFML/System/Vector2.hpp>
#include <cmath>

////////////////////////////////////////////////////////////////////////////////
struct Vec2f {

    ////////////////////////////////////////////////////////////////////////////
    constexpr Vec2f() : X(0.F), Y(0.F) { }

    ////////////////////////////////////////////////////////////////////////////
    constexpr Vec2f(float x, float y) : X(x), Y(y) { }

    ////////////////////////////////////////////////////////////////////////////
    constexpr Vec2f(const sf::Vector2f& vec) : X(vec.x), Y(vec.y) { }

    ////////////////////////////////////////////////////////////////////////////
    sf::Vector2f operator/(float rhs) const {
        return sf::Vector2f(X, Y) / rhs;
    }

    ////////////////////////////////////////////////////////////////////////////
    sf::Vector2f operator-() const {
        return -sf::Vector2f(X, Y);
    }

    ////////////////////////////////////////////////////////////////////////////
    operator sf::Vector2f() const {
        return {X, Y};
    }

    ////////////////////////////////////////////////////////////////////////////
    float X;

    ////////////////////////////////////////////////////////////////////////////
    float Y;
};

////////////////////////////////////////////////////////////////////////////////
template <class T>
float Length(T vec) {
    return std::sqrt( (vec.x * vec.x) + (vec.y * vec.y) );
}

////////////////////////////////////////////////////////////////////////////////
template <class T>
sf::Vector2f Normalize(T vec) {
    auto mag = Length(vec);

    if(mag == 0) {
        return vec;
    }

    return vec / mag;
}
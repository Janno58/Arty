#pragma once

////////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>
#include <algorithm>

////////////////////////////////////////////////////////////////////////////////
constexpr float DEFAULT_HEALTHBAR_WIDTH = 100.F;
constexpr float DEFAULT_HEALTHBAR_HEIGHT = 25.F;

////////////////////////////////////////////////////////////////////////////////
class Healthbar : public sf::Drawable {
public:

    ////////////////////////////////////////////////////////////////////////////
    Healthbar();

    ////////////////////////////////////////////////////////////////////////////
    void SetHealthPercentage(float healthPercentage);

private:

    ////////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget &target, sf::RenderStates states) const override;

    /// Size
    ////////////////////////////////////////////////////////////////////////////
    sf::Vector2f size{DEFAULT_HEALTHBAR_WIDTH, DEFAULT_HEALTHBAR_HEIGHT};

    /// Bottom bar
    ////////////////////////////////////////////////////////////////////////////
    sf::RectangleShape bottomBar;

    /// Top bar
    ////////////////////////////////////////////////////////////////////////////
    sf::RectangleShape topBar;

};

////////////////////////////////////////////////////////////////////////////////
template <typename T, typename healthType>
struct HealthComponent {

    ////////////////////////////////////////////////////////////////////////////
    void Heal(healthType heal) {
        health = std::clamp(health + heal, 0, maxHealth);
    }

    ////////////////////////////////////////////////////////////////////////////
    void Damage(healthType damage) {
        health -= damage;

        if(health < 0.001F) {
            destroyed = true;
        }

        health = std::clamp(health, static_cast<healthType>(0), maxHealth);

        const auto hpPercentage = maxHealth / 100.F * health;
        healthBar.SetHealthPercentage(hpPercentage);
    }

    ////////////////////////////////////////////////////////////////////////////
    const Healthbar& GetHealthbar() const {
        return healthBar;
    }

    ////////////////////////////////////////////////////////////////////////////
    healthType GetHealthAbs() const {
        return health;
    }

private:

    /// Current health value
    ////////////////////////////////////////////////////////////////////////////
    healthType health = 100.F;

    /// Maximum health possible
    ////////////////////////////////////////////////////////////////////////////
    healthType maxHealth = 100.F;

    /// True if health has reached zero
    ////////////////////////////////////////////////////////////////////////////
    bool destroyed = false;

    ////////////////////////////////////////////////////////////////////////////
    Healthbar healthBar;
};

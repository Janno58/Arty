#pragma once

////////////////////////////////////////////////////////////////////////////////
#include "Vector.h"
#include <cstdint>
#include <vector>

////////////////////////////////////////////////////////////////////////////////
struct Color {
    uint8_t r = 0;
    uint8_t g = 0;
    uint8_t b = 0;
    uint8_t a = 0;
};

////////////////////////////////////////////////////////////////////////////////
struct Pixel {

    ////////////////////////////////////////////////////////////////////////////
    Pixel(int xPos, int yPos, Color col);

    ////////////////////////////////////////////////////////////////////////////
    int x = 0;
    int y = 0;

    ////////////////////////////////////////////////////////////////////////////
    Color color;

    ////////////////////////////////////////////////////////////////////////////
    operator Vec2u() const {
        return {static_cast<unsigned int>(x), static_cast<unsigned int>(y)};
    }
};

////////////////////////////////////////////////////////////////////////////////
using Pixels = std::vector<Pixel>;

////////////////////////////////////////////////////////////////////////////////
std::vector<Pixel> CreateCircle(int centerX, int centerY, int radius);

////////////////////////////////////////////////////////////////////////////////
bool Overlaps(Vec2f pos1, Vec2u size1, const std::vector<std::uint8_t>& pixels1,
              Vec2f pos2, Vec2u size2, const std::vector<std::uint8_t>& pixels2);

////////////////////////////////////////////////////////////////////////////////
bool Overlaps(Vec2f pos1, Vec2f pos2, Vec2u size2, const std::vector<std::uint8_t>& pixels2);
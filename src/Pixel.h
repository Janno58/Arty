#pragma once

////////////////////////////////////////////////////////////////////////////////
#include <vector>
#include <SFML/Graphics/Color.hpp>
#include <SFML/System/Vector2.hpp>

////////////////////////////////////////////////////////////////////////////////
struct Pixel {

    ////////////////////////////////////////////////////////////////////////////
    Pixel(int xPos, int yPos, sf::Color col);

    ////////////////////////////////////////////////////////////////////////////
    operator sf::Vector2f() const {
        return {static_cast<float>(x), static_cast<float>(y)};
    };

    ////////////////////////////////////////////////////////////////////////////
    int x = 0;
    int y = 0;

    ////////////////////////////////////////////////////////////////////////////
    sf::Color color = sf::Color(0,0,0,0);
};

////////////////////////////////////////////////////////////////////////////////
std::vector<Pixel> CreateCircle(int centerX, int centerY, int radius);

////////////////////////////////////////////////////////////////////////////////
template<typename T>
int CountOverlap(const std::vector<Pixel>& toCheck, const T& checkAgainst) {
    int result = 0;

    for(const auto& pixel : toCheck) {

        // Have to check bounds
        // TODO: Write Unit.GetPixels();
        const auto pixelCA = checkAgainst.GetPixelGlobal(pixel);

        if(pixelCA != sf::Color(0, 0, 0, 0)) {
            result++;
        }
    }

    return result;
}